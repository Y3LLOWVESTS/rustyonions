#!/usr/bin/env bash
# scaffold_ron_app_sdk2.sh — create the ron-app-sdk2 crate scaffold (no code, just files/dirs).
# Usage: bash scripts/scaffold_ron_app_sdk2.sh [--force]

set -euo pipefail

FORCE=0
if [[ "${1:-}" == "--force" ]]; then
  FORCE=1
fi

ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
CRATE_DIR="$ROOT_DIR/crates/ron-app-sdk2"

log() { printf '%s\n' "$*"; }

mkd() {
  mkdir -p "$1"
  log "dir: $1"
}

write_file() {
  # write_file <path> <heredoc-content>
  local path="$1"
  shift
  local content="$1"
  if [[ -e "$path" && "$FORCE" -ne 1 ]]; then
    log "skip (exists): $path"
    return 0
  fi
  mkd "$(dirname "$path")"
  # shellcheck disable=SC2001
  # We use a literal heredoc to avoid variable interpolation.
  cat > "$path" <<'EOF'
REPLACE_ME
EOF
  # Replace placeholder with the actual content (keeps heredoc readable above)
  printf "%s" "$content" > "$path"
  log "wrote: $path"
}

# Helper to feed multi-line strings without escaping hell.
blk() {
  # blk <<'EOS' ... EOS
  cat
}

# ---------- Directories ----------
mkd "$CRATE_DIR"
mkd "$CRATE_DIR/docs/diagrams"
mkd "$CRATE_DIR/docs/api-history/ron-app-sdk2"
mkd "$CRATE_DIR/src/config"
mkd "$CRATE_DIR/src/cache"
mkd "$CRATE_DIR/src/transport"
mkd "$CRATE_DIR/src/planes"
mkd "$CRATE_DIR/examples"
mkd "$CRATE_DIR/tests/vectors"
mkd "$CRATE_DIR/benches"
mkd "$CRATE_DIR/fuzz/fuzz_targets"
mkd "$CRATE_DIR/scripts"
mkd "$CRATE_DIR/.github/workflows"

# ---------- Top level files ----------
write_file "$CRATE_DIR/Cargo.toml" "$(blk <<'EOS'
[package]
name = "ron-app-sdk2"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
description = "RustyOnions application SDK (scaffold)."
readme = "README.md"
repository = ""

[features]
default = ["tls"]
tls = []
tor = []
metrics = []
pq = []
pq-hybrid = []

[dependencies]
# Workspace-pinned deps go here when implemented.

[dev-dependencies]

[package.metadata.docs]
EOS
)"

write_file "$CRATE_DIR/README.md" "$(blk <<'EOS'
# ron-app-sdk2

> Role: library (application SDK)  
> Status: scaffold-only (no code)  
> MSRV: 1.80.0

This crate mirrors the `ron-app-sdk` structure with small, modular files. Fill according to ALL_DOCS and project blueprints. Diagrams in ./docs/diagrams. Tests map 1:1 to invariants in docs/IDB.md.
EOS
)"

write_file "$CRATE_DIR/CHANGELOG.md" "$(blk <<'EOS'
# Changelog — ron-app-sdk2

## v0.1.0
- Initial scaffold (no implementation).
EOS
)"

write_file "$CRATE_DIR/LICENSE-MIT" "$(blk <<'EOS'
MIT License
(placeholder text; replace with full MIT license if needed)
EOS
)"

write_file "$CRATE_DIR/LICENSE-APACHE" "$(blk <<'EOS'
Apache License 2.0
(placeholder text; replace with full Apache-2.0 license if needed)
EOS
)"

write_file "$CRATE_DIR/.gitignore" "$(blk <<'EOS'
target/
**/*.DS_Store
Cargo.lock
criterion/
EOS
)"

write_file "$CRATE_DIR/rust-toolchain.toml" "$(blk <<'EOS'
[toolchain]
channel = "1.80.0"
components = ["rustfmt", "clippy"]
EOS
)"

# ---------- docs ----------
for f in API.md CONCURRENCY.md CONFIG.md GOVERNANCE.md IDB.md INTEROP.md OBSERVABILITY.md PERFORMANCE.md QUANTUM.md RUNBOOK.md SECURITY.md TESTS.md; do
  write_file "$CRATE_DIR/docs/$f" "$(blk <<'EOS'
# Placeholder
This file mirrors the completed documentation for ron-app-sdk. Copy the finalized content here when ready.
EOS
)"
done

write_file "$CRATE_DIR/docs/api-history/ron-app-sdk2/v0.1.0.txt" "$(blk <<'EOS'
# public API snapshot — v0.1.0 (scaffold)
# Generated by: cargo public-api (to be wired in CI)
EOS
)"

write_file "$CRATE_DIR/docs/diagrams/arch.mmd" "$(blk <<'EOS'
flowchart LR
  subgraph App
    A[Your App] -->|API calls| B(ron-app-sdk2)
  end
  B -->|OAP/1 over TLS/Tor| C[svc-gateway]
  C --> D[srv: storage/index/mailbox/overlay]
  B --> E[[host metrics + tracing]]
  style B fill:#0b7285,stroke:#083344,color:#fff
EOS
)"

write_file "$CRATE_DIR/docs/diagrams/sequence_put.mmd" "$(blk <<'EOS'
sequenceDiagram
  actor App
  participant SDK as ron-app-sdk2
  participant GW as svc-gateway
  participant ST as svc-storage
  App->>SDK: storage_put(bytes, cap, idem_key)
  SDK->>GW: OAP/1 POST /put (≤1 MiB)
  GW->>ST: stream ~64 KiB
  ST-->>GW: AddrB3 (b3:<hex>)
  GW-->>SDK: receipt
  SDK-->>App: AddrB3
EOS
)"

write_file "$CRATE_DIR/docs/diagrams/lifecycle.mmd" "$(blk <<'EOS'
stateDiagram-v2
  [*] --> Idle
  Idle --> Ready: new(cfg)
  Ready --> Calling: edge_get/storage_put
  Calling --> Ready: ok
  Calling --> Backoff: timeout/5xx
  Backoff --> Ready: capped retries
  Ready --> [*]: drop()
EOS
)"

# ---------- src (no implementation, just headers) ----------
write_file "$CRATE_DIR/src/lib.rs" "$(blk <<'EOS'
//! ron-app-sdk2 — library facade (scaffold).
//! Keep implementation small and modular; expose public surface & planes.

pub mod config;
pub mod context;
pub mod errors;
pub mod retry;
pub mod idempotency;
pub mod tracing;
pub mod metrics;
pub mod cache;
pub mod transport;
pub mod planes;
pub mod ready;
pub mod types;
EOS
)"

write_file "$CRATE_DIR/src/context.rs" "$(blk <<'EOS'
//! context.rs — process/profile context (scaffold). No heavy logic here.
EOS
)"

write_file "$CRATE_DIR/src/errors.rs" "$(blk <<'EOS'
//! errors.rs — central error taxonomy (scaffold). Map transport/wire to SDK errors.
EOS
)"

write_file "$CRATE_DIR/src/config/mod.rs" "$(blk <<'EOS'
//! config/mod.rs — typed config & validation (scaffold). Env-first with sane defaults.
EOS
)"

write_file "$CRATE_DIR/src/retry.rs" "$(blk <<'EOS'
//! retry.rs — backoff/deadline helpers (scaffold). Full-jitter, capped attempts.
EOS
)"

write_file "$CRATE_DIR/src/idempotency.rs" "$(blk <<'EOS'
//! idempotency.rs — key generation/attachment helpers (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/tracing.rs" "$(blk <<'EOS'
//! tracing.rs — span fields, corr_id propagation, redaction rules (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/metrics.rs" "$(blk <<'EOS'
//! metrics.rs — SDK-prefixed counters/histograms (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/cache/mod.rs" "$(blk <<'EOS'
//! cache/mod.rs — bounded TTL cache interface (scaffold).
pub mod lru;
EOS
)"

write_file "$CRATE_DIR/src/cache/lru.rs" "$(blk <<'EOS'
//! cache/lru.rs — small LRU placeholder (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/transport/mod.rs" "$(blk <<'EOS'
//! transport/mod.rs — select TLS vs Tor; enforce OAP caps (scaffold). No server/listener code.
EOS
)"

write_file "$CRATE_DIR/src/planes/storage.rs" "$(blk <<'EOS'
//! planes/storage.rs — storage get/put (scaffold). ~64 KiB streaming.
EOS
)"

write_file "$CRATE_DIR/src/planes/edge.rs" "$(blk <<'EOS'
//! planes/edge.rs — edge get (scaffold). DTO strictness.
EOS
)"

write_file "$CRATE_DIR/src/planes/mailbox.rs" "$(blk <<'EOS'
//! planes/mailbox.rs — send/recv/ack (scaffold). At-least-once semantics.
EOS
)"

write_file "$CRATE_DIR/src/planes/index.rs" "$(blk <<'EOS'
//! planes/index.rs — index resolve (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/planes/mod.rs" "$(blk <<'EOS'
//! planes/mod.rs — re-exports for edge/storage/mailbox/index (scaffold).
pub mod storage;
pub mod edge;
pub mod mailbox;
pub mod index;
EOS
)"

write_file "$CRATE_DIR/src/ready.rs" "$(blk <<'EOS'
//! ready.rs — lightweight readiness report (scaffold).
EOS
)"

write_file "$CRATE_DIR/src/types.rs" "$(blk <<'EOS'
//! types.rs — re-export DTOs/types from ron-proto (scaffold).
EOS
)"

# ---------- examples ----------
write_file "$CRATE_DIR/examples/demo.rs" "$(blk <<'EOS'
//! demo.rs — minimal example (scaffold).
fn main() {
    println!("ron-app-sdk2 demo scaffold");
}
EOS
)"

# ---------- tests ----------
write_file "$CRATE_DIR/tests/i_1_profile_parity.rs" "$(blk <<'EOS'
// Invariant: profile parity across transports (scaffold).
#[test] fn i_1_profile_parity_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_2_caps_required.rs" "$(blk <<'EOS'
// Invariant: capabilities required on mutations (scaffold).
#[test] fn i_2_caps_required_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_3_oap_bounds.rs" "$(blk <<'EOS'
// Invariant: OAP/1 frame cap <= 1 MiB (scaffold).
#[test] fn i_3_oap_bounds_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_4_content_addressing.rs" "$(blk <<'EOS'
// Invariant: AddrB3 content addressing on PUTs (scaffold).
#[test] fn i_4_content_addressing_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_5_retries_deadlines.rs" "$(blk <<'EOS'
// Invariant: bounded retries + deadlines (scaffold).
#[test] fn i_5_retries_deadlines_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_6_dto_strictness.rs" "$(blk <<'EOS'
// Invariant: strict DTO parsing (deny_unknown_fields) (scaffold).
#[test] fn i_6_dto_strictness_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_7_transport_agnostic.rs" "$(blk <<'EOS'
// Invariant: transport-agnostic semantics (TLS vs Tor) (scaffold).
#[test] fn i_7_transport_agnostic_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_8_deadlines_everywhere.rs" "$(blk <<'EOS'
// Invariant: deadlines on all external I/O (scaffold).
#[test] fn i_8_deadlines_everywhere_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_9_error_taxonomy.rs" "$(blk <<'EOS'
// Invariant: error taxonomy mapping + retry classes (scaffold).
#[test] fn i_9_error_taxonomy_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_10_semver_snapshot.rs" "$(blk <<'EOS'
// Invariant: public API snapshot honored (scaffold).
#[test] fn i_10_semver_snapshot_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_11_no_persistence.rs" "$(blk <<'EOS'
// Invariant: no on-disk persistence (scaffold).
#[test] fn i_11_no_persistence_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/i_12_canon_deps.rs" "$(blk <<'EOS'
// Invariant: workspace pins / canon deps (scaffold).
#[test] fn i_12_canon_deps_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/prop_retry_bounds.rs" "$(blk <<'EOS'
// Property test placeholder: retry sleeps sum < overall deadline (scaffold).
#[test] fn prop_retry_bounds_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/prop_oap_frames.rs" "$(blk <<'EOS'
// Property test placeholder: frames near 1 MiB bound (scaffold).
#[test] fn prop_oap_frames_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/interop_vectors.rs" "$(blk <<'EOS'
// Canonical interop vectors runner (scaffold).
#[test] fn interop_vectors_scaffold() { assert!(true); }
EOS
)"

write_file "$CRATE_DIR/tests/vectors/oap1_min_req.bin" "$(blk <<'EOS'
placeholder
EOS
)"

write_file "$CRATE_DIR/tests/vectors/oap1_min_req.json" "$(blk <<'EOS'
{"placeholder": true}
EOS
)"

write_file "$CRATE_DIR/tests/vectors/capability_example.json" "$(blk <<'EOS'
{"capability":"placeholder"}
EOS
)"

# ---------- benches ----------
write_file "$CRATE_DIR/benches/sdk_benches.rs" "$(blk <<'EOS'
// Criterion benches placeholder (scaffold).
fn main() { println!("benches scaffold"); }
EOS
)"

# ---------- fuzz ----------
write_file "$CRATE_DIR/fuzz/Cargo.toml" "$(blk <<'EOS'
[workspace]
members = ["."]
EOS
)"

write_file "$CRATE_DIR/fuzz/fuzz_targets/oap_frame_parser.rs" "$(blk <<'EOS'
// fuzz target placeholder: oap_frame_parser (scaffold)
fn main() {}
EOS
)"

write_file "$CRATE_DIR/fuzz/fuzz_targets/dto_roundtrip.rs" "$(blk <<'EOS'
// fuzz target placeholder: dto_roundtrip (scaffold)
fn main() {}
EOS
)"

# ---------- scripts ----------
write_file "$CRATE_DIR/scripts/compare_bench.py" "$(blk <<'EOS'
#!/usr/bin/env python3
# compare_bench.py — placeholder to diff Criterion results (scaffold)
print("compare_bench scaffold")
EOS
)"

write_file "$CRATE_DIR/scripts/gen_api_snapshot.sh" "$(blk <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
# gen_api_snapshot.sh — run cargo public-api and save to docs/api-history (scaffold)
echo "api snapshot scaffold"
EOS
)"

# ---------- GitHub Actions ----------
write_file "$CRATE_DIR/.github/workflows/ci.yml" "$(blk <<'EOS'
name: ci
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - run: cargo fmt --all -- --check
      - run: cargo clippy -p ron-app-sdk2 -- -D warnings
      - run: cargo test -p ron-app-sdk2
EOS
)"

write_file "$CRATE_DIR/.github/workflows/render-mermaid.yml" "$(blk <<'EOS'
name: render-mermaid
on: [push, pull_request]
jobs:
  mmdc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm i -g @mermaid-js/mermaid-cli
      - run: |
          mkdir -p docs/diagrams
          for f in $(git ls-files 'docs/diagrams/*.mmd'); do
            out="${f%.mmd}.svg"; mmdc -i "$f" -o "$out";
          done
EOS
)"

write_file "$CRATE_DIR/.github/workflows/perf-guardrails.yml" "$(blk <<'EOS'
name: perf-guardrails
on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"
jobs:
  perf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo bench -p ron-app-sdk2 || true
EOS
)"

write_file "$CRATE_DIR/.github/workflows/api-semver.yml" "$(blk <<'EOS'
name: api-semver
on: [pull_request]
jobs:
  semver:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "public-api check scaffold"
EOS
)"

log "Done. Scaffold created at: $CRATE_DIR"
if [[ "$FORCE" -eq 1 ]]; then
  log "Note: --force overwrote existing files."
fi

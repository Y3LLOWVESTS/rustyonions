#!/usr/bin/env bash
# scaffold_svc_index2.sh — create no-code scaffold for crates/svc-index2
# Notes:
# - Idempotent: creates directories; writes files only if missing or empty.
# - Safe for macOS/BSD; no GNU-only tools required.
# - Default target: crates/svc-index2 (override with first arg).

set -euo pipefail

CRATE_DIR="${1:-crates/svc-index2}"

die() {
  echo "error: $*" >&2
  exit 1
}

# Ensure crate dir exists (do not auto-create the top-level crate directory;
# user said the crate already exists — but we’ll be helpful if it's missing).
if [ ! -d "$CRATE_DIR" ]; then
  echo "info: crate directory '$CRATE_DIR' not found, creating it now..."
  mkdir -p "$CRATE_DIR"
fi

# Utilities
mkd() { mkdir -p "$CRATE_DIR/$1"; }
mkf() {
  local path="$CRATE_DIR/$1"
  local content="$2"
  if [ ! -e "$path" ] || [ ! -s "$path" ]; then
    mkdir -p "$(dirname "$path")"
    printf "%s" "$content" > "$path"
  fi
}

note="(auto-generated by scaffold_svc_index2.sh; replace with real content later)"

# ----------------------------
# Root & meta
# ----------------------------
mkf "CHANGELOG.md" "---
title: Changelog — svc-index2
status: draft
---

All notable changes to this project will be documented here using **SemVer**.

- 0.1.0 (unreleased) — initial scaffold.
"
mkf "LICENSE-APACHE" "Apache License 2.0 — placeholder. ${note}
"
mkf "LICENSE-MIT" "MIT License — placeholder. ${note}
"
mkf ".editorconfig" "root = true

[*]
charset = utf-8
end_of_line = lf
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true
"
mkf ".gitignore" "/target
.DS_Store
**/*.swp
**/*.swo
**/*.log
**/tmp/
**/var/
**/artifacts/
**/*.svg
.env
.env.*
coverage/
"
mkf "deny.toml" "# cargo-deny config (baseline) — ${note}
[advisories]
vulnerability = \"deny\"
yanked = \"deny\"
unmaintained = \"warn\"

[bans]
multiple-versions = \"warn\"

[sources]
unknown-registry = \"deny\"
unknown-git = \"deny\"
allow-git = []
"
mkd ".cargo"
mkf ".cargo/config.toml" "# local build defaults — ${note}
[build]
rustflags = []

[target.'cfg(all())']
rustflags = []

[term]
verbose = true
"

# ----------------------------
# Configs
# ----------------------------
mkd "configs"
mkf "configs/dev.env.example" "INDEX_BIND=127.0.0.1:9909
METRICS_ADDR=127.0.0.1:0
RON_INDEX_DB=./var/index
INDEX_DEADLINE_MS=1200
INDEX_INFLIGHT=1024
INDEX_DECMP_MAXR=10
INDEX_MAX_REQ_B=1048576
INDEX_MAX_RSP_B=1048576
LOG_LEVEL=info
AMNESIA=false
"
mkf "configs/prod.env.example" "INDEX_BIND=0.0.0.0:9909
METRICS_ADDR=0.0.0.0:0
RON_INDEX_DB=/var/lib/svc-index2
INDEX_DEADLINE_MS=1000
INDEX_INFLIGHT=512
INDEX_DECMP_MAXR=10
INDEX_MAX_REQ_B=1048576
INDEX_MAX_RSP_B=1048576
LOG_LEVEL=warn
AMNESIA=false
"
mkf "configs/Config.toml.example" "# optional TOML overrides — ${note}
[bounds]
deadline_ms = 1200
inflight = 1024
decompress_max_ratio = 10
max_request_bytes = 1048576
max_response_bytes = 1048576
"

# ----------------------------
# Docs
# ----------------------------
mkd "docs/openapi"
mkf "docs/README_LINKS.md" "# svc-index2 — Docs Index

- IDB: ./IDB.md
- CONFIG: ./CONFIG.md
- OBSERVABILITY: ./OBSERVABILITY.md
- SECURITY: ./SECURITY.md
- PERFORMANCE: ./PERFORMANCE.md
- QUANTUM: ./QUANTUM.md
- RUNBOOK: ./RUNBOOK.md
- API: ./API.md
- TESTS: ./TESTS.md
- OpenAPI: ./openapi/svc-index.v1.yaml
"
mkf "docs/IDB.md" "# IDB — Invariant-Driven Blueprint (svc-index2)

MUST / MUST NOT / PROOF sections live here. ${note}
"
mkf "docs/CONFIG.md" "# CONFIG — svc-index2

All environment variables and TOML knobs with defaults and precedence. ${note}
"
mkf "docs/OBSERVABILITY.md" "# OBSERVABILITY — svc-index2

Canonical metrics, logs, traces, scrape and alerting guidance. ${note}
"
mkf "docs/SECURITY.md" "# SECURITY — svc-index2

STRIDE, capabilities/macaroons, UDS peer-cred, amnesia mode. ${note}
"
mkf "docs/PERFORMANCE.md" "# PERFORMANCE — svc-index2

Bench harness, datasets, SLO reproduction steps. ${note}
"
mkf "docs/QUANTUM.md" "# QUANTUM — svc-index2

PQ posture; TLS hybrid KEM plan; PQ signature issuers. ${note}
"
mkf "docs/RUNBOOK.md" "# RUNBOOK — svc-index2

On-call workflows: symptoms → metrics → mitigations. ${note}
"
mkf "docs/API.md" "# API — svc-index2

HTTP/UDS surface, headers, cache hints, error taxonomy. ${note}
"
mkf "docs/TESTS.md" "# TESTS — svc-index2

Unit/prop/loom/fuzz/golden; coverage & perf gates. ${note}
"
mkf "docs/arch.mmd" "flowchart LR
  A[Caller] -->|HTTP/UDS| B(svc-index2)
  B --> C[[svc-dht]]
  B --> D[(Index DB/Cache)]
  B --> E[(Audit)]
  B --> F[[Prometheus]]
  style B fill:#0b7285,stroke:#083344,color:#fff
"
mkf "docs/sequence.mmd" "sequenceDiagram
  actor Caller
  participant GW as svc-gateway
  participant IDX as svc-index2
  participant DHT as svc-dht
  Caller->>GW: GET /resolve/{key}
  GW->>IDX: /resolve/{key}
  par α
    IDX->>DHT: findProviders(key) [α]
  and β
    IDX->>DHT: findProviders(key) [β]
  end
  DHT-->>IDX: provider set(s)
  IDX-->>GW: 200 Resolved
  GW-->>Caller: 200 JSON
"
mkf "docs/state.mmd" "stateDiagram-v2
  [*] --> Idle
  Idle --> Starting
  Starting --> Running: deps_ready
  Running --> Hedging
  Hedging --> Running: winner < deadline
  Running --> Backoff: overload
  Backoff --> Running
  Running --> Shutdown
  Shutdown --> [*]
"
mkf "docs/openapi/svc-index.v1.yaml" "openapi: 3.0.3
info:
  title: svc-index2 API
  version: 0.1.0
paths:
  /healthz:
    get:
      responses:
        '200':
          description: ok
  /readyz:
    get:
      responses:
        '200':
          description: readiness
"

# ----------------------------
# Benches
# ----------------------------
mkd "benches/datasets"
mkf "benches/resolve.rs" "// Criterion bench placeholder — ${note}
fn main() { }
"
mkf "benches/datasets/keys.txt" "b3:deadbeef
b3:cafebabe
"
mkf "benches/datasets/regions.txt" "us-east-1
eu-west-1
ap-southeast-1
"

# ----------------------------
# Scripts
# ----------------------------
mkd "scripts"
mkf "scripts/smoke.sh" "#!/usr/bin/env bash
set -euo pipefail
echo \"smoke: would start svc-index2, hit /healthz, /readyz, and basic /resolve\"
"
mkf "scripts/mermaid_render.sh" "#!/usr/bin/env bash
set -euo pipefail
echo \"render: would run mmdc for docs/*.mmd -> *.svg\"
"
mkf "scripts/bench_resolve.sh" "#!/usr/bin/env bash
set -euo pipefail
echo \"bench: would run Criterion on benches/resolve.rs with datasets\"
"
mkf "scripts/soak.sh" "#!/usr/bin/env bash
set -euo pipefail
echo \"soak: would run a short soak test and write histograms to artifacts/\"
"
mkf "scripts/chaos_inject.sh" "#!/usr/bin/env bash
set -euo pipefail
echo \"chaos: would inject latency/drop into mocked DHT for tests\"
"
chmod +x "$CRATE_DIR"/scripts/*.sh

# ----------------------------
# Fuzz
# ----------------------------
mkd "fuzz/fuzz_targets"
mkf "fuzz/Cargo.toml" "[package]
name = \"svc-index2-fuzz\"
version = \"0.0.0\"
publish = false
edition = \"2021\"

[workspace]
members = []

[package.metadata]
cargo-fuzz = true
"
mkf "fuzz/fuzz.toml" "# fuzz seeds and budgets — ${note}
[http_resolve]
max_total_time = 30

[parse_manifest]
max_total_time = 30
"
mkf "fuzz/fuzz_targets/http_resolve.rs" "// fuzz target placeholder — ${note}
fn main() { }
"
mkf "fuzz/fuzz_targets/parse_manifest.rs" "// fuzz target placeholder — ${note}
fn main() { }
"

# ----------------------------
# Tests & golden
# ----------------------------
mkd "tests/golden/resolve"
mkf "tests/http_contract.rs" "// http contract tests placeholder — ${note}
#[test] fn http_contract_placeholder() { assert!(true); }
"
mkf "tests/prop_index.rs" "// property tests placeholder — ${note}
#[test] fn prop_placeholder() { assert!(true); }
"
mkf "tests/loom_index.rs" "// loom tests placeholder — ${note}
#[test] fn loom_placeholder() { assert!(true); }
"
mkf "tests/integration.rs" "// integration tests placeholder — ${note}
#[test] fn integration_placeholder() { assert!(true); }
"
mkf "tests/chaos.rs" "// chaos tests placeholder — ${note}
#[test] fn chaos_placeholder() { assert!(true); }
"
mkf "tests/golden/resolve/ok_basic.json" "{ \"case\": \"ok_basic\", \"expect\": \"Resolved\" }\n"
mkf "tests/golden/resolve/not_found.json" "{ \"case\": \"not_found\", \"expect\": 404 }\n"
mkf "tests/golden/resolve/providers_ranked.json" "{ \"case\": \"providers_ranked\", \"expect\": [\"p1\",\"p2\"] }\n"
mkf "tests/golden/resolve/over_capacity.json" "{ \"case\": \"over_capacity\", \"expect\": 429 }\n"

# ----------------------------
# Examples
# ----------------------------
mkd "examples"
mkf "examples/client.rs" "// example client placeholder — ${note}
fn main() { }
"

# ----------------------------
# src/
# ----------------------------
mkd "src/utils"
mkd "src/state"
mkd "src/http/extractors"
mkd "src/http/middleware"
mkd "src/http/routes"
mkd "src/pipeline"
mkd "src/dht"
mkd "src/cache"
mkd "src/store"
mkd "src/auth"
mkd "src/audit"
mkd "src/bus"
mkd "src/net"

mkf "src/lib.rs" "// lib.rs — public surface (stubs) — ${note}
pub fn placeholder() {}
"
mkf "src/main.rs" "// main.rs placeholder — ${note}
fn main() { println!(\"svc-index2 scaffold binary placeholder\"); }
"
mkf "src/app.rs" "// app bootstrap placeholder — ${note}
"
mkf "src/router.rs" "// router assembly placeholder — ${note}
"
mkf "src/error.rs" "// error taxonomy placeholder — ${note}
"
mkf "src/types.rs" "// shared internal types placeholder — ${note}
"
mkf "src/config.rs" "// config loader placeholder — ${note}
"
mkf "src/logging.rs" "// logging/tracing setup placeholder — ${note}
"
mkf "src/telemetry.rs" "// prometheus/otel setup placeholder — ${note}
"
mkf "src/constants.rs" "// invariants & caps placeholder — ${note}
pub const OAP_MAX_FRAME_BYTES: usize = 1_048_576; // 1 MiB
pub const DECOMP_MAX_RATIO: u32 = 10;
pub const DEFAULT_DEADLINE_MS: u64 = 1200;
pub const DEFAULT_INFLIGHT: usize = 1024;
"
mkf "src/utils/timeouts.rs" "// deadline budgeting helpers placeholder — ${note}
"

# state
mkf "src/state/mod.rs" "// AppState placeholder — ${note}
"
mkf "src/state/readiness.rs" "// readiness checks placeholder — ${note}
"
mkf "src/state/metrics.rs" "// metrics registry placeholder — ${note}
"
mkf "src/state/shutdown.rs" "// graceful shutdown placeholder — ${note}
"

# http
mkf "src/http/mod.rs" "// http prelude placeholder — ${note}
"
mkf "src/http/extractors/corr_id.rs" "// corr-id extractor placeholder — ${note}
"
mkf "src/http/extractors/capability.rs" "// capability extractor placeholder — ${note}
"
mkf "src/http/extractors/limits.rs" "// limits extractor placeholder — ${note}
"
mkf "src/http/middleware/body_limits.rs" "// body limits middleware placeholder — ${note}
"
mkf "src/http/middleware/decompress_guard.rs" "// decompress ratio guard middleware placeholder — ${note}
"
mkf "src/http/middleware/rate_limit.rs" "// rate limit middleware placeholder — ${note}
"
mkf "src/http/middleware/trace_layer.rs" "// trace layer placeholder — ${note}
"
mkf "src/http/routes/health.rs" "// /healthz and /readyz routes placeholder — ${note}
"
mkf "src/http/routes/metrics.rs" "// /metrics route placeholder — ${note}
"
mkf "src/http/routes/version.rs" "// /version route placeholder — ${note}
"
mkf "src/http/routes/resolve.rs" "// GET /resolve/{key} placeholder — ${note}
"
mkf "src/http/routes/providers.rs" "// GET /providers/{cid} placeholder — ${note}
"
mkf "src/http/routes/admin.rs" "// admin routes placeholder — ${note}
"

# pipeline
mkf "src/pipeline/mod.rs" "// pipeline prelude placeholder — ${note}
"
mkf "src/pipeline/resolve.rs" "// resolve pipeline placeholder — ${note}
"
mkf "src/pipeline/providers.rs" "// providers pipeline placeholder — ${note}
"

# dht
mkf "src/dht/mod.rs" "// dht trait/prelude placeholder — ${note}
"
mkf "src/dht/client.rs" "// dht client placeholder — ${note}
"
mkf "src/dht/hedge.rs" "// hedged lookups placeholder — ${note}
"
mkf "src/dht/rank.rs" "// provider ranking placeholder — ${note}
"

# cache
mkf "src/cache/mod.rs" "// cache traits placeholder — ${note}
"
mkf "src/cache/manifest.rs" "// manifest cache placeholder — ${note}
"
mkf "src/cache/providers.rs" "// providers cache placeholder — ${note}
"
mkf "src/cache/negative.rs" "// negative cache placeholder — ${note}
"

# store
mkf "src/store/mod.rs" "// store trait/schema gate placeholder — ${note}
"
mkf "src/store/sled_store.rs" "// sled-backed store placeholder — ${note}
"
mkf "src/store/keys.rs" "// keyspace layout placeholder — ${note}
"
mkf "src/store/schema.rs" "// schema versions & migrations placeholder — ${note}
"

# auth
mkf "src/auth/mod.rs" "// auth prelude placeholder — ${note}
"
mkf "src/auth/caps.rs" "// capability policies placeholder — ${note}
"
mkf "src/auth/uds_allow.rs" "// uds allowlist placeholder — ${note}
"

# audit
mkf "src/audit/mod.rs" "// audit facade placeholder — ${note}
"
mkf "src/audit/events.rs" "// audit events placeholder — ${note}
"

# bus
mkf "src/bus/mod.rs" "// bus integration placeholder — ${note}
"
mkf "src/bus/events.rs" "// bus events placeholder — ${note}
"

# net
mkf "src/net/mod.rs" "// net prelude placeholder — ${note}
"
mkf "src/net/listener.rs" "// http listener bootstrap placeholder — ${note}
"
mkf "src/net/uds.rs" "// uds server setup placeholder — ${note}
"
mkf "src/net/tls.rs" "// tls server config placeholder (tokio_rustls::rustls::ServerConfig) — ${note}
"

# ----------------------------
# .github/workflows
# ----------------------------
mkd ".github/workflows"
mkf ".github/workflows/ci.yml" "name: ci
on: [push, pull_request]
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo fmt --all -- --check
      - run: cargo clippy -p svc-index2 -- -D warnings
      - run: cargo test -p svc-index2 --all-features
      - run: cargo deny check
"
mkf ".github/workflows/render-mermaid.yml" "name: render-mermaid
on: [push, pull_request]
jobs:
  mmdc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm i -g @mermaid-js/mermaid-cli
      - run: |
          for f in \$(git ls-files '${CRATE_DIR}/docs/*.mmd'); do
            out=\"\${f%.mmd}.svg\"
            mmdc -i \"\$f\" -o \"\$out\"
          done
"
mkf ".github/workflows/fuzz.yml" "name: fuzz
on:
  workflow_dispatch: {}
jobs:
  fuzz:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo 'run cargo-fuzz locally or in a container; stub only'
"
mkf ".github/workflows/coverage.yml" "name: coverage
on:
  workflow_dispatch: {}
jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: cargo llvm-cov --workspace --lcov --output-path lcov.info
"
mkf ".github/workflows/perf-regress.yml" "name: perf-regress
on:
  workflow_dispatch: {}
jobs:
  perf:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo 'run Criterion and compare vs baseline; stub only'
"
mkf ".github/workflows/chaos.yml" "name: chaos
on:
  workflow_dispatch: {}
jobs:
  chaos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo 'inject latency/drop into mocked DHT during tests; stub only'
"

echo "Scaffold complete for ${CRATE_DIR}."
